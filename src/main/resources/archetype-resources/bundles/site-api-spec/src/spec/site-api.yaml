# This Spec is an Example and does only loosely validate the API with a few schema definitions.
# For real-life projects it's recommended to tightly validate the JSON output of all components.
openapi: "3.0.0"

info:
  version: "1.0.0-SNAPSHOT"
  title: "Site API Spec"
  description: "Delivering content from AEM Sites via REST API."

paths:

  "{contentPath}.site.v1.api/index.json":
    get:
      summary: Entry point for Site API
      description: Provides hypermedia links to the other parts of the API.
      parameters:
        - name: contentPath
          in: path
          description: Content page path
          required: true
          schema:
            $ref: '#/components/schemas/ContentPath'
      responses:
        200:
          description: Index Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    suffix:
                      type: string
                    url:
                      type: string
                      example: "{contentPath}.site.api/{suffix}.json"
                      description: Site API URI
                      pattern: "^http(|s)://.+"
                  required: ["suffix", "url"]
                  additionalProperties: false

  "{contentPath}.site.v1.api/navigation.json":
    get:
      summary: Navigation structures.
      description: Main navigation.
      parameters:
        - name: contentPath
          in: path
          description: Content page path
          required: true
          schema:
            $ref: '#/components/schemas/ContentPath'
      responses:
        200:
          description: Navigation Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationItem'

  "{contentPath}.site.v1.api/config.json":
    get:
      summary: Configuration parameters.
      description: Exports a list of context-aware configurations.
      parameters:
        - name: contentPath
          in: path
          description: Content page path
          required: true
          schema:
            $ref: '#/components/schemas/ContentPath'
      responses:
        200:
          description:
            Configuration Response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ConfigSample:
                    $ref: '#/components/schemas/ContextAwareConfig.ConfigSample'
                additionalProperties: false

  "{contentPath}.site.v1.api/content.json":
    get:
      summary: Page content.
      description: Render content components of page.
      parameters:
        - name: contentPath
          in: path
          description: Content page path
          required: true
          schema:
            $ref: '#/components/schemas/ContentPath'
      responses:
        200:
          description: Page Content Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContent'

components:

  schemas:

    ContentPath:
      type: string
      pattern: (/[^/]+)+
      example: /content/page1
      description: AEM content page path

    LocalPath:
      type: string
      pattern: (|(/[^/]+)+)
      example: /page-1
      description: Local path relative to site root page. "" for site root page.

    NavigationItem:
      type: object
      description: Represents a navigation item.
      properties:
        title:
          type: string
          example: "Navigation Item"
        link:
          $ref: '#/components/schemas/Link'
        children:
          type: array
          items:
            $ref: '#/components/schemas/NavigationItem'
      required: ["title", "link"]
      additionalProperties: false

    Link:
      type: object
      description: Reference to internal, external and download links
      properties:
        url:
          type: string
          example: "{contentPath}.site.v1.api/{suffix}.json"
          description: Site API URI or external link URL or Asset URL depending on link type
          pattern: "^http(|s)://.+"
        type:
          type: string
          description: Link type
          enum:
            - internal
            - external
            - media
        windowTarget:
          type: string
          description: Window target for link
          enum:
            - _self
            - _blank
        path:
          $ref: '#/components/schemas/ContentPath'
        localPath:
          $ref: '#/components/schemas/LocalPath'
      required: [ "type","url" ]
      additionalProperties: false

    Image:
      type: object
      description: Reference to image asset
      properties:
        path:
          $ref: '#/components/schemas/ContentPath'
        url:
          type: string
          description: Main rendition URL
          pattern: "^http(|s)://.+"
        renditions:
          type: array
          description: Image variant renditions with same ratio, different resolutions
          items:
            type: object
            properties:
              url:
                type: string
                description: URL pointing to image rendition
                pattern: "^http(|s)://.+"
              width:
                type: number
                description: Rendition width (px)
                example: 500
              height:
                type: number
                description: Rendition height (px)
                example: 400
              ratio:
                type: number
                description: 'Ratio width : height'
              path:
                $ref: '#/components/schemas/ContentPath'
              mimeType:
                type: string
              fileName:
                type: string
              fileExtension:
                type: string
              fileSize:
                type: number
              fallback:
                type: boolean
            required: ["url","width","height"]
            additionalProperties: false
      required: ["path","url","renditions"]
      additionalProperties: false

    PageContent:
      type: object
      properties:
        ':type':
          type: string
        'title':
          type: string
        ':items':
          type: object
          properties:
            root:
              $ref: '#/components/schemas/Structure.Container'
        ':itemsOrder':
          type: array
          items:
            type: string
      required: [":type",":items",":itemsOrder"]
      additionalProperties: true

    Structure.Container:
      type: object
      properties:
        ':type':
          type: string
          enum:
            - ${projectName}/core/components/container/container
        ':itemsOrder':
          type: array
          items:
            type: string
        ':items':
          type: object
          additionalProperties:
            anyOf:
              - $ref: '#/components/schemas/Structure.Container'
              - $ref: '#/components/schemas/Component.Title'
              - $ref: '#/components/schemas/Component.Text'
              - $ref: '#/components/schemas/Component.OtherComponents'
      required: [ ":type",":itemsOrder",":items" ]
      additionalProperties: true

    # Example for a context-aware Configuration
    ContextAwareConfig.ConfigSample:
      type: object
      description: Sample Configuration
      properties:
        stringParam:
          type: string
          description: String Param
      additionalProperties: true

    Component.Title:
      type: object
      properties:
        ':type':
          type: string
          enum:
            - ${projectName}/core/components/content/title
        text:
          type: string
          description: Plain text title
      required: [":type"]
      additionalProperties: true

    Component.Text:
      type: object
      properties:
        ':type':
          type: string
          enum:
            - ${projectName}/core/components/content/text
        text:
          type: string
          description: Rich text as HTML
      required: [":type"]
      additionalProperties: true

    # This is just a catch-all definition for other example components of the demo project
    # It does not enforce actual properties, replace it with schema definitions per component
    Component.OtherComponents:
      type: object
      properties:
        ':type':
          type: string
          enum:
            - ${projectName}/core/components/content/button
            - ${projectName}/core/components/content/contentfragment
            - ${projectName}/core/components/content/contentfragmentlist
            - ${projectName}/core/components/content/customcarousel
            - ${projectName}/core/components/content/download
            - ${projectName}/core/components/content/embed
            - ${projectName}/core/components/content/experiencefragment
            - ${projectName}/core/components/content/list
            - ${projectName}/core/components/content/pdfviewer
            - ${projectName}/core/components/content/progressbar
            - ${projectName}/core/components/content/responsiveimage
            - ${projectName}/core/components/content/separator
            - ${projectName}/core/components/content/teaser
            - ${projectName}/core/components/templating/imprint
      required: [":type"]
      additionalProperties: true
